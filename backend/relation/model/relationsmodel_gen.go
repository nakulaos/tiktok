// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"github.com/zeromicro/go-zero/core/logx"
	"strings"

	"time"

	"github.com/Masterminds/squirrel"
	"github.com/pkg/errors"
	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
	"tiktok/common/globalkey"
)

var (
	relationsFieldNames          = builder.RawFieldNames(&Relations{})
	relationsRows                = strings.Join(relationsFieldNames, ",")
	relationsRowsExpectAutoSet   = strings.Join(stringx.Remove(relationsFieldNames, "`id`", "`create_time`", "`update_time`"), ",")
	relationsRowsWithPlaceHolder = strings.Join(stringx.Remove(relationsFieldNames, "`id`", "`create_time`", "`update_time`"), "=?,") + "=?"
)

type (
	relationsModel interface {
		Insert(ctx context.Context, session sqlx.Session, data *Relations) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Relations, error)
		Update(ctx context.Context, session sqlx.Session, data *Relations) (sql.Result, error)
		UpdateWithVersion(ctx context.Context, session sqlx.Session, data *Relations) error
		Trans(ctx context.Context, fn func(context context.Context, session sqlx.Session) error) error
		SelectBuilder() squirrel.SelectBuilder
		DeleteSoft(ctx context.Context, session sqlx.Session, data *Relations) error
		FindSum(ctx context.Context, sumBuilder squirrel.SelectBuilder, field string) (float64, error)
		FindCount(ctx context.Context, countBuilder squirrel.SelectBuilder, field string) (int64, error)
		FindAll(ctx context.Context, rowBuilder squirrel.SelectBuilder, orderBy string) ([]*Relations, error)
		FindPageListByPage(ctx context.Context, rowBuilder squirrel.SelectBuilder, page, pageSize int64, orderBy string) ([]*Relations, error)
		FindPageListByPageWithTotal(ctx context.Context, rowBuilder squirrel.SelectBuilder, page, pageSize int64, orderBy string) ([]*Relations, int64, error)
		FindPageListByIdDESC(ctx context.Context, rowBuilder squirrel.SelectBuilder, preMinId, pageSize int64) ([]*Relations, error)
		FindPageListByIdASC(ctx context.Context, rowBuilder squirrel.SelectBuilder, preMaxId, pageSize int64) ([]*Relations, error)
		Delete(ctx context.Context, session sqlx.Session, id int64) error
	}

	defaultRelationsModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Relations struct {
		Id          int64     `db:"id"`           // 主键
		FollowerId  int64     `db:"follower_id"`  // 关注者id
		FollowingId int64     `db:"following_id"` // 被关注者id
		CreateTime  time.Time `db:"create_time"`
		UpdateTime  time.Time `db:"update_time"`
		DeleteTime  time.Time `db:"delete_time"`
		DelState    int64     `db:"del_state"`
		Version     int64     `db:"version"` // 版本号
	}
)

func newRelationsModel(conn sqlx.SqlConn) *defaultRelationsModel {
	return &defaultRelationsModel{
		conn:  conn,
		table: "`relations`",
	}
}

func (m *defaultRelationsModel) Insert(ctx context.Context, session sqlx.Session, data *Relations) (sql.Result, error) {
	data.DeleteTime = time.Unix(0, 0)
	data.DelState = globalkey.DelStateNo

	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, relationsRowsExpectAutoSet)
	if session != nil {
		return session.ExecCtx(ctx, query, data.FollowerId, data.FollowingId, data.DeleteTime, data.DelState, data.Version)
	}
	return m.conn.ExecCtx(ctx, query, data.FollowerId, data.FollowingId, data.DeleteTime, data.DelState, data.Version)
}

func (m *defaultRelationsModel) FindOne(ctx context.Context, id int64) (*Relations, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ?  and del_state = ? limit 1", relationsRows, m.table)
	var resp Relations
	err := m.conn.QueryRowCtx(ctx, &resp, query, id, globalkey.DelStateNo)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultRelationsModel) Update(ctx context.Context, session sqlx.Session, data *Relations) (sql.Result, error) {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, relationsRowsWithPlaceHolder)
	if session != nil {
		return session.ExecCtx(ctx, query, data.FollowerId, data.FollowingId, data.DeleteTime, data.DelState, data.Version, data.Id)
	}
	return m.conn.ExecCtx(ctx, query, data.FollowerId, data.FollowingId, data.DeleteTime, data.DelState, data.Version, data.Id)
}

func (m *defaultRelationsModel) DeleteSoft(ctx context.Context, session sqlx.Session, data *Relations) error {
	data.DelState = globalkey.DelStateYes
	data.DeleteTime = time.Now()
	if err := m.UpdateWithVersion(ctx, session, data); err != nil {
		return errors.Wrapf(errors.New("delete soft failed "), "RelationsModel delete err : %+v", err)
	}
	return nil
}

func (m *defaultRelationsModel) FindSum(ctx context.Context, builder squirrel.SelectBuilder, field string) (float64, error) {

	if len(field) == 0 {
		return 0, errors.Wrapf(errors.New("FindSum Least One Field"), "FindSum Least One Field")
	}

	builder = builder.Columns("IFNULL(SUM(" + field + "),0)")

	query, values, err := builder.Where("del_state = ?", globalkey.DelStateNo).ToSql()
	if err != nil {
		return 0, err
	}

	var resp float64

	err = m.conn.QueryRowCtx(ctx, &resp, query, values...)

	switch err {
	case nil:
		return resp, nil
	default:
		return 0, err
	}
}

func (m *defaultRelationsModel) FindCount(ctx context.Context, builder squirrel.SelectBuilder, field string) (int64, error) {

	if len(field) == 0 {
		return 0, errors.Wrapf(errors.New("FindCount Least One Field"), "FindCount Least One Field")
	}

	builder = builder.Columns("COUNT(" + field + ")")

	query, values, err := builder.Where("del_state = ?", globalkey.DelStateNo).ToSql()
	if err != nil {
		return 0, err
	}

	var resp int64

	err = m.conn.QueryRowCtx(ctx, &resp, query, values...)

	switch err {
	case nil:
		logx.WithContext(ctx).Infof("resp:%d", resp)
		return resp, nil
	default:
		return 0, err
	}
}

func (m *defaultRelationsModel) FindAll(ctx context.Context, builder squirrel.SelectBuilder, orderBy string) ([]*Relations, error) {

	builder = builder.Columns(relationsRows)

	if orderBy == "" {
		builder = builder.OrderBy("id DESC")
	} else {
		builder = builder.OrderBy(orderBy)
	}

	query, values, err := builder.Where("del_state = ?", globalkey.DelStateNo).ToSql()
	if err != nil {
		return nil, err
	}

	var resp []*Relations

	err = m.conn.QueryRowsCtx(ctx, &resp, query, values...)

	switch err {
	case nil:
		return resp, nil
	default:
		return nil, err
	}
}

func (m *defaultRelationsModel) FindPageListByPage(ctx context.Context, builder squirrel.SelectBuilder, page, pageSize int64, orderBy string) ([]*Relations, error) {

	builder = builder.Columns(relationsRows)

	if orderBy == "" {
		builder = builder.OrderBy("id DESC")
	} else {
		builder = builder.OrderBy(orderBy)
	}

	if page < 1 {
		page = 1
	}
	offset := (page - 1) * pageSize

	query, values, err := builder.Where("del_state = ?", globalkey.DelStateNo).Offset(uint64(offset)).Limit(uint64(pageSize)).ToSql()
	if err != nil {
		return nil, err
	}

	var resp []*Relations

	err = m.conn.QueryRowsCtx(ctx, &resp, query, values...)

	switch err {
	case nil:
		return resp, nil
	default:
		return nil, err
	}
}

func (m *defaultRelationsModel) FindPageListByPageWithTotal(ctx context.Context, builder squirrel.SelectBuilder, page, pageSize int64, orderBy string) ([]*Relations, int64, error) {

	total, err := m.FindCount(ctx, builder, "id")
	if err != nil {
		return nil, 0, err
	}

	builder = builder.Columns(relationsRows)

	if orderBy == "" {
		builder = builder.OrderBy("id DESC")
	} else {
		builder = builder.OrderBy(orderBy)
	}

	if page < 1 {
		page = 1
	}
	offset := (page - 1) * pageSize

	query, values, err := builder.Where("del_state = ?", globalkey.DelStateNo).Offset(uint64(offset)).Limit(uint64(pageSize)).ToSql()
	if err != nil {
		return nil, total, err
	}

	var resp []*Relations

	err = m.conn.QueryRowsCtx(ctx, &resp, query, values...)

	switch err {
	case nil:
		return resp, total, nil
	default:
		return nil, total, err
	}
}

func (m *defaultRelationsModel) FindPageListByIdDESC(ctx context.Context, builder squirrel.SelectBuilder, preMinId, pageSize int64) ([]*Relations, error) {

	builder = builder.Columns(relationsRows)

	if preMinId > 0 {
		builder = builder.Where(" id < ? ", preMinId)
	}

	query, values, err := builder.Where("del_state = ?", globalkey.DelStateNo).OrderBy("id DESC").Limit(uint64(pageSize)).ToSql()
	if err != nil {
		return nil, err
	}

	var resp []*Relations

	err = m.conn.QueryRowsCtx(ctx, &resp, query, values...)

	switch err {
	case nil:
		return resp, nil
	default:
		return nil, err
	}
}

func (m *defaultRelationsModel) FindPageListByIdASC(ctx context.Context, builder squirrel.SelectBuilder, preMaxId, pageSize int64) ([]*Relations, error) {

	builder = builder.Columns(relationsRows)

	if preMaxId > 0 {
		builder = builder.Where(" id > ? ", preMaxId)
	}

	query, values, err := builder.Where("del_state = ?", globalkey.DelStateNo).OrderBy("id ASC").Limit(uint64(pageSize)).ToSql()
	if err != nil {
		return nil, err
	}

	var resp []*Relations

	err = m.conn.QueryRowsCtx(ctx, &resp, query, values...)

	switch err {
	case nil:
		return resp, nil
	default:
		return nil, err
	}
}

func (m *defaultRelationsModel) Trans(ctx context.Context, fn func(ctx context.Context, session sqlx.Session) error) error {

	return m.conn.TransactCtx(ctx, func(ctx context.Context, session sqlx.Session) error {
		return fn(ctx, session)
	})

}

func (m *defaultRelationsModel) SelectBuilder() squirrel.SelectBuilder {
	return squirrel.Select().From(m.table)
}

func (m *defaultRelationsModel) UpdateWithVersion(ctx context.Context, session sqlx.Session, data *Relations) error {

	oldVersion := data.Version
	data.Version += 1

	var sqlResult sql.Result
	var err error

	query := fmt.Sprintf("update %s set %s where `id` = ? and version = ? ", m.table, relationsRowsWithPlaceHolder)
	if session != nil {
		sqlResult, err = session.ExecCtx(ctx, query, data.FollowerId, data.FollowingId, data.DeleteTime, data.DelState, data.Version, data.Id, oldVersion)
	} else {
		sqlResult, err = m.conn.ExecCtx(ctx, query, data.FollowerId, data.FollowingId, data.DeleteTime, data.DelState, data.Version, data.Id, oldVersion)
	}

	if err != nil {
		return err
	}
	updateCount, err := sqlResult.RowsAffected()
	if err != nil {
		return err
	}
	if updateCount == 0 {
		return ErrNoRowsUpdate
	}

	return nil
}
func (m *defaultRelationsModel) Delete(ctx context.Context, session sqlx.Session, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	if session != nil {
		_, err := session.ExecCtx(ctx, query, id)
		return err
	}
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultRelationsModel) tableName() string {
	return m.table
}
