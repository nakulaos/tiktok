// Code generated by goctl. DO NOT EDIT.
// Source: user.proto

package usesrv

import (
	"context"

	"tiktok/user/rpc/user"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	LoginResponse            = user.LoginResponse
	LoginWithEmailRequest    = user.LoginWithEmailRequest
	LoginWithPhoneRequest    = user.LoginWithPhoneRequest
	LoginWithUsernameRequest = user.LoginWithUsernameRequest
	RegisterRequest          = user.RegisterRequest
	RegisterResponse         = user.RegisterResponse
	UpdateReq                = user.UpdateReq
	UpdateResp               = user.UpdateResp
	UserInfo                 = user.UserInfo
	UserInfoRequest          = user.UserInfoRequest
	UserInfoResponse         = user.UserInfoResponse

	UseSrv interface {
		// 用户登录
		LoginWithPhone(ctx context.Context, in *LoginWithPhoneRequest, opts ...grpc.CallOption) (*LoginResponse, error)
		LoginWithEmail(ctx context.Context, in *LoginWithEmailRequest, opts ...grpc.CallOption) (*LoginResponse, error)
		LoginWithUsername(ctx context.Context, in *LoginWithUsernameRequest, opts ...grpc.CallOption) (*LoginResponse, error)
		// 用户注册
		Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
		// 用户信息
		UserInfo(ctx context.Context, in *UserInfoRequest, opts ...grpc.CallOption) (*UserInfoResponse, error)
		// 修改用户信息
		Update(ctx context.Context, in *UpdateReq, opts ...grpc.CallOption) (*UpdateResp, error)
	}

	defaultUseSrv struct {
		cli zrpc.Client
	}
)

func NewUseSrv(cli zrpc.Client) UseSrv {
	return &defaultUseSrv{
		cli: cli,
	}
}

// 用户登录
func (m *defaultUseSrv) LoginWithPhone(ctx context.Context, in *LoginWithPhoneRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	client := user.NewUseSrvClient(m.cli.Conn())
	return client.LoginWithPhone(ctx, in, opts...)
}

func (m *defaultUseSrv) LoginWithEmail(ctx context.Context, in *LoginWithEmailRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	client := user.NewUseSrvClient(m.cli.Conn())
	return client.LoginWithEmail(ctx, in, opts...)
}

func (m *defaultUseSrv) LoginWithUsername(ctx context.Context, in *LoginWithUsernameRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	client := user.NewUseSrvClient(m.cli.Conn())
	return client.LoginWithUsername(ctx, in, opts...)
}

// 用户注册
func (m *defaultUseSrv) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	client := user.NewUseSrvClient(m.cli.Conn())
	return client.Register(ctx, in, opts...)
}

// 用户信息
func (m *defaultUseSrv) UserInfo(ctx context.Context, in *UserInfoRequest, opts ...grpc.CallOption) (*UserInfoResponse, error) {
	client := user.NewUseSrvClient(m.cli.Conn())
	return client.UserInfo(ctx, in, opts...)
}

// 修改用户信息
func (m *defaultUseSrv) Update(ctx context.Context, in *UpdateReq, opts ...grpc.CallOption) (*UpdateResp, error) {
	client := user.NewUseSrvClient(m.cli.Conn())
	return client.Update(ctx, in, opts...)
}
