// Code generated by goctl. DO NOT EDIT.
package types

type LoginResp struct {
	Avatar          string `json:"avatar" `
	AccessToken     string `json:"accessToken"`
	UserID          int64  `json:"user_id"`
	Name            string `json:"name"`
	Gender          uint32 `json:"gender"`
	Signature       string `json:"signature"`
	Username        string `json:"username"`
	Email           string `json:"email"`
	BackgroundImage string `json:"background_image"` //用户个人页顶部大图
}

type LoginWithEmailReq struct {
	Email    string `json:"email" validate:"required,email" msg:"emailFormat"`
	Password string `json:"password" validate:"min_len=8,max_len=20,password,required" msg:"passwordFormat" `
}

type LoginWithPhoneReq struct {
	Phone    string `json:"phone" validate:"required,phone" msg:"phoneFormat"`
	Password string `json:"password" validate:"min_len=8,max_len=20,password,required" msg:"passwordFormat"`
}

type LoginWithUsernameReq struct {
	Username string `json:"username" validate:"min_len=3,max_len=12,required,alphanum" msg:"usernameFormat"`
	Password string `json:"password" validate:"min_len=8,max_len=20,password,required" msg:"passwordFormat"`
}

type RegisterReq struct {
	Username        string `json:"username" validate:"min_len=3,max_len=12,required,alphanum" msg:"usernameFormat"`
	Password        string `json:"password" validate:"min_len=8,max_len=20,password,required" msg:"passwordFormat"`
	Email           string `json:"email,optional"`
	Phone           string `json:"phone,optional"`
	Gender          int64  `json:"gender" validate:"required,min=1,max=3" msg:"genderFormat"`
	Dec             string `json:"dec" validate:"required,max_len=255" msg:"decFormat"`
	Avatar          string `json:"avatar" validate:"required,max_len=255" msg:"avatarFormat"`
	BackgroundImage string `json:"background_image,max_len=255" msg:"backgroundImageFormat"`
}

type UpdateRequest struct {
	Nickname        string `json:"nickname,optional" validate:"min_len=3,max_len=12,alphanum" msg:"nicknameFormat"`
	Gender          int64  `json:"gender,optional" validate:"min=0,max=2" msg:"genderFormat"`
	Avatar          string `json:"avatar,optional" validate:"max_len=255" msg:"avatarFormat"`
	Dec             string `json:"dec,optional" validate:"max_len=255" msg:"decFormat"`
	BackgroundImage string `json:"background_image,optional" validate:"max_len=255" msg:"backgroundImageFormat"`
}

type UploadImageResponse struct {
	Url string `json:"url" `
}

type User struct {
	Id              uint32 `json:"id"`
	Nickname        string `json:"nickname"`
	Avatar          string `json:"avatar"`
	Gender          uint32 `json:"gender"`
	Signature       string `json:"signature"`
	BackgroundImage string `json:"background_image"` //用户个人页顶部大图
	FollowCount     uint32 `json:"follow_count"`
	FollowerCount   uint32 `json:"follower_count"`
	TotalFavorited  uint32 `json:"total_favorited"`
	WorkCount       uint32 `json:"work_count"`
	FavoriteCount   uint32 `json:"favorite_count"`
	IsFollow        bool   `json:"is_follow"`
	FriendCount     int64  `json:"friend_count"`
}

type UserInfoReq struct {
	Uid int64 `json:"uid"`
}

type UserInfoResponse struct {
	User User `json:"user"`
}

type UserUploadResponse struct {
	Url      string `json:"url"`
	CoverUrl string `json:"coverUrl"`
}
